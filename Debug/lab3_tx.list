
lab3_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002118  08002118  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002118  08002118  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002118  08002118  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000002c  0800214c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800214c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008090  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001627  00000000  00000000  00028128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00029750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058f  00000000  00000000  00029e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016372  00000000  00000000  0002a427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085e0  00000000  00000000  00040799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080b2c  00000000  00000000  00048d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cfc  00000000  00000000  000c98a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000cb5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020d4 	.word	0x080020d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080020d4 	.word	0x080020d4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa61 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f85f 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f905 	bl	8000368 <MX_GPIO_Init>
  MX_CAN_Init();
 800015e:	f000 f8a1 	bl	80002a4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8d7 	bl	8000314 <MX_USART1_UART_Init>
/*  CAN_FilterTypeDef Can_Filter = {
		  .FilterActivation = CAN_FILTER_ENABLE,
		  .FilterBank = 0,
  };
  HAL_CAN_ConfigFilter(&hcan, &Can_Filter);*/
  HAL_CAN_Start(&hcan);
 8000166:	4826      	ldr	r0, [pc, #152]	; (8000200 <main+0xb4>)
 8000168:	f000 fbd7 	bl	800091a <HAL_CAN_Start>

   CAN_TxHeaderTypeDef TxHeader = {
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	609a      	str	r2, [r3, #8]
 8000176:	60da      	str	r2, [r3, #12]
 8000178:	611a      	str	r2, [r3, #16]
 800017a:	615a      	str	r2, [r3, #20]
 800017c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	2308      	movs	r3, #8
 8000184:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint32_t MailBox = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800018a:	2300      	movs	r3, #0
 800018c:	77fb      	strb	r3, [r7, #31]

	status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data1, &MailBox);
 800018e:	463b      	mov	r3, r7
 8000190:	1d39      	adds	r1, r7, #4
 8000192:	4a1c      	ldr	r2, [pc, #112]	; (8000204 <main+0xb8>)
 8000194:	481a      	ldr	r0, [pc, #104]	; (8000200 <main+0xb4>)
 8000196:	f000 fc04 	bl	80009a2 <HAL_CAN_AddTxMessage>
 800019a:	4603      	mov	r3, r0
 800019c:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK)
 800019e:	7ffb      	ldrb	r3, [r7, #31]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d006      	beq.n	80001b2 <main+0x66>
	{
		HAL_UART_Transmit(&huart1, TRANSMIT_F, sizeof(TRANSMIT_F), 100);
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	2208      	movs	r2, #8
 80001a8:	4917      	ldr	r1, [pc, #92]	; (8000208 <main+0xbc>)
 80001aa:	4818      	ldr	r0, [pc, #96]	; (800020c <main+0xc0>)
 80001ac:	f001 fde6 	bl	8001d7c <HAL_UART_Transmit>
 80001b0:	e005      	b.n	80001be <main+0x72>
	}
	else
	{
		HAL_UART_Transmit(&huart1, TRANSMIT_T, sizeof(TRANSMIT_T), 100);
 80001b2:	2364      	movs	r3, #100	; 0x64
 80001b4:	2208      	movs	r2, #8
 80001b6:	4916      	ldr	r1, [pc, #88]	; (8000210 <main+0xc4>)
 80001b8:	4814      	ldr	r0, [pc, #80]	; (800020c <main+0xc0>)
 80001ba:	f001 fddf 	bl	8001d7c <HAL_UART_Transmit>
	}
	HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f000 fa8b 	bl	80006dc <HAL_Delay>
	status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data2, &MailBox);
 80001c6:	463b      	mov	r3, r7
 80001c8:	1d39      	adds	r1, r7, #4
 80001ca:	4a12      	ldr	r2, [pc, #72]	; (8000214 <main+0xc8>)
 80001cc:	480c      	ldr	r0, [pc, #48]	; (8000200 <main+0xb4>)
 80001ce:	f000 fbe8 	bl	80009a2 <HAL_CAN_AddTxMessage>
 80001d2:	4603      	mov	r3, r0
 80001d4:	77fb      	strb	r3, [r7, #31]
	if (status != HAL_OK)
 80001d6:	7ffb      	ldrb	r3, [r7, #31]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d006      	beq.n	80001ea <main+0x9e>
	{
		HAL_UART_Transmit(&huart1, TRANSMIT_F, sizeof(TRANSMIT_F), 100);
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	2208      	movs	r2, #8
 80001e0:	4909      	ldr	r1, [pc, #36]	; (8000208 <main+0xbc>)
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <main+0xc0>)
 80001e4:	f001 fdca 	bl	8001d7c <HAL_UART_Transmit>
 80001e8:	e005      	b.n	80001f6 <main+0xaa>
	}
	else
	{
	  HAL_UART_Transmit(&huart1, TRANSMIT_T, sizeof(TRANSMIT_T), 100);
 80001ea:	2364      	movs	r3, #100	; 0x64
 80001ec:	2208      	movs	r2, #8
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <main+0xc4>)
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0xc0>)
 80001f2:	f001 fdc3 	bl	8001d7c <HAL_UART_Transmit>
	}
	HAL_Delay(1000);
 80001f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fa:	f000 fa6f 	bl	80006dc <HAL_Delay>
  {
 80001fe:	e7c2      	b.n	8000186 <main+0x3a>
 8000200:	20000048 	.word	0x20000048
 8000204:	20000010 	.word	0x20000010
 8000208:	20000000 	.word	0x20000000
 800020c:	20000070 	.word	0x20000070
 8000210:	20000008 	.word	0x20000008
 8000214:	20000018 	.word	0x20000018

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 ff28 	bl	800207c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023a:	2301      	movs	r3, #1
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f92b 	bl	80014bc <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026c:	f000 f89e 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb98 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000296:	f000 f889 	bl	80003ac <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_CAN_Init+0x68>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	; (8000310 <MX_CAN_Init+0x6c>)
 80002ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_CAN_Init+0x68>)
 80002b0:	2204      	movs	r2, #4
 80002b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_CAN_Init+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_CAN_Init+0x68>)
 80002bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_CAN_Init+0x68>)
 80002c4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80002c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_CAN_Init+0x68>)
 80002cc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_CAN_Init+0x68>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_CAN_Init+0x68>)
 80002da:	2200      	movs	r2, #0
 80002dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MX_CAN_Init+0x68>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_CAN_Init+0x68>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <MX_CAN_Init+0x68>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_CAN_Init+0x68>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_CAN_Init+0x68>)
 80002f8:	f000 fa14 	bl	8000724 <HAL_CAN_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000302:	f000 f853 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000048 	.word	0x20000048
 8000310:	40006400 	.word	0x40006400

08000314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800031a:	4a12      	ldr	r2, [pc, #72]	; (8000364 <MX_USART1_UART_Init+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800034c:	f001 fcc6 	bl	8001cdc <HAL_UART_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000356:	f000 f829 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000070 	.word	0x20000070
 8000364:	40013800 	.word	0x40013800

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0320 	and.w	r3, r3, #32
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <MX_GPIO_Init+0x40>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <HAL_CAN_MspInit+0x9c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d139      	bne.n	80004b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	61d3      	str	r3, [r2, #28]
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b19      	ldr	r3, [pc, #100]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a18      	ldr	r2, [pc, #96]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <HAL_CAN_MspInit+0xa0>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800046c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <HAL_CAN_MspInit+0xa4>)
 8000482:	f000 fe97 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	2302      	movs	r3, #2
 800048e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000490:	2303      	movs	r3, #3
 8000492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4809      	ldr	r0, [pc, #36]	; (80004c0 <HAL_CAN_MspInit+0xa4>)
 800049c:	f000 fe8a 	bl	80011b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2015      	movs	r0, #21
 80004a6:	f000 fe4e 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80004aa:	2015      	movs	r0, #21
 80004ac:	f000 fe67 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40006400 	.word	0x40006400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <HAL_UART_MspInit+0x8c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d131      	bne.n	8000548 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a1a      	ldr	r2, [pc, #104]	; (8000554 <HAL_UART_MspInit+0x90>)
 80004ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_UART_MspInit+0x90>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_UART_MspInit+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <HAL_UART_MspInit+0x94>)
 800052a:	f000 fe43 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800052e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <HAL_UART_MspInit+0x94>)
 8000544:	f000 fe36 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013800 	.word	0x40013800
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f87f 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <CAN1_RX1_IRQHandler+0x10>)
 80005b2:	f000 fac5 	bl	8000b40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000048 	.word	0x20000048

080005c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005cc:	f7ff fff8 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005e8:	4c09      	ldr	r4, [pc, #36]	; (8000610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f6:	f001 fd49 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fda7 	bl	800014c <main>
  bx lr
 80005fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000608:	08002120 	.word	0x08002120
  ldr r2, =_sbss
 800060c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000610:	200000bc 	.word	0x200000bc

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>
	...

08000618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_Init+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_Init+0x28>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fd81 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f808 	bl	8000644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff fec0 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x54>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x58>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	fbb3 f3f1 	udiv	r3, r3, r1
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fd99 	bl	800119a <HAL_SYSTICK_Config>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	e00e      	b.n	8000690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d80a      	bhi.n	800068e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f000 fd61 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_InitTick+0x5c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	e000      	b.n	8000690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000020 	.word	0x20000020
 800069c:	20000028 	.word	0x20000028
 80006a0:	20000024 	.word	0x20000024

080006a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x1c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <HAL_IncTick+0x20>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000028 	.word	0x20000028
 80006c4:	200000b8 	.word	0x200000b8

080006c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <HAL_GetTick+0x10>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	200000b8 	.word	0x200000b8

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff fff0 	bl	80006c8 <HAL_GetTick>
 80006e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d005      	beq.n	8000702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_Delay+0x44>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000702:	bf00      	nop
 8000704:	f7ff ffe0 	bl	80006c8 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	429a      	cmp	r2, r3
 8000712:	d8f7      	bhi.n	8000704 <HAL_Delay+0x28>
  {
  }
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e0ed      	b.n	8000912 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d102      	bne.n	8000748 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff fe6a 	bl	800041c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000758:	f7ff ffb6 	bl	80006c8 <HAL_GetTick>
 800075c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800075e:	e012      	b.n	8000786 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000760:	f7ff ffb2 	bl	80006c8 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b0a      	cmp	r3, #10
 800076c:	d90b      	bls.n	8000786 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e0c5      	b.n	8000912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0e5      	beq.n	8000760 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f022 0202 	bic.w	r2, r2, #2
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ff90 	bl	80006c8 <HAL_GetTick>
 80007a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ff8c 	bl	80006c8 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d90b      	bls.n	80007d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2205      	movs	r2, #5
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e09f      	b.n	8000912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1e5      	bne.n	80007ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7e1b      	ldrb	r3, [r3, #24]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d108      	bne.n	80007fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e007      	b.n	800080a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7e5b      	ldrb	r3, [r3, #25]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d108      	bne.n	8000824 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e007      	b.n	8000834 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000832:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7e9b      	ldrb	r3, [r3, #26]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d108      	bne.n	800084e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0220 	orr.w	r2, r2, #32
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e007      	b.n	800085e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f022 0220 	bic.w	r2, r2, #32
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7edb      	ldrb	r3, [r3, #27]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d108      	bne.n	8000878 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 0210 	bic.w	r2, r2, #16
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e007      	b.n	8000888 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f042 0210 	orr.w	r2, r2, #16
 8000886:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7f1b      	ldrb	r3, [r3, #28]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d108      	bne.n	80008a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0208 	orr.w	r2, r2, #8
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f022 0208 	bic.w	r2, r2, #8
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7f5b      	ldrb	r3, [r3, #29]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d108      	bne.n	80008cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f042 0204 	orr.w	r2, r2, #4
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e007      	b.n	80008dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0204 	bic.w	r2, r2, #4
 80008da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	ea42 0103 	orr.w	r1, r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	430a      	orrs	r2, r1
 8000900:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b01      	cmp	r3, #1
 800092c:	d12e      	bne.n	800098c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2202      	movs	r2, #2
 8000932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0201 	bic.w	r2, r2, #1
 8000944:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000946:	f7ff febf 	bl	80006c8 <HAL_GetTick>
 800094a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800094c:	e012      	b.n	8000974 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800094e:	f7ff febb 	bl	80006c8 <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b0a      	cmp	r3, #10
 800095a:	d90b      	bls.n	8000974 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000960:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2205      	movs	r2, #5
 800096c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e012      	b.n	800099a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1e5      	bne.n	800094e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	e006      	b.n	800099a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000990:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
  }
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b089      	sub	sp, #36	; 0x24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d003      	beq.n	80009ce <HAL_CAN_AddTxMessage+0x2c>
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	f040 80ad 	bne.w	8000b28 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10a      	bne.n	80009ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 8095 	beq.w	8000b18 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	0e1b      	lsrs	r3, r3, #24
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009f8:	2201      	movs	r2, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	409a      	lsls	r2, r3
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10d      	bne.n	8000a26 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a14:	68f9      	ldr	r1, [r7, #12]
 8000a16:	6809      	ldr	r1, [r1, #0]
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3318      	adds	r3, #24
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	440b      	add	r3, r1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e00f      	b.n	8000a46 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a36:	68f9      	ldr	r1, [r7, #12]
 8000a38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3318      	adds	r3, #24
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	440b      	add	r3, r1
 8000a44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6819      	ldr	r1, [r3, #0]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3318      	adds	r3, #24
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	440b      	add	r3, r1
 8000a56:	3304      	adds	r3, #4
 8000a58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	7d1b      	ldrb	r3, [r3, #20]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d111      	bne.n	8000a86 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3318      	adds	r3, #24
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	440b      	add	r3, r1
 8000a82:	3304      	adds	r3, #4
 8000a84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3307      	adds	r3, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	061a      	lsls	r2, r3, #24
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3306      	adds	r3, #6
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	431a      	orrs	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3305      	adds	r3, #5
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	3204      	adds	r2, #4
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	6811      	ldr	r1, [r2, #0]
 8000aae:	ea43 0200 	orr.w	r2, r3, r0
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	011b      	lsls	r3, r3, #4
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000abc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3303      	adds	r3, #3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	061a      	lsls	r2, r3, #24
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3302      	adds	r3, #2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	4610      	mov	r0, r2
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	6811      	ldr	r1, [r2, #0]
 8000ae4:	ea43 0200 	orr.w	r2, r3, r0
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	440b      	add	r3, r1
 8000aee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000af2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3318      	adds	r3, #24
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	6811      	ldr	r1, [r2, #0]
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3318      	adds	r3, #24
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	440b      	add	r3, r1
 8000b12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	e00e      	b.n	8000b36 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e006      	b.n	8000b36 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
  }
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d07c      	beq.n	8000c80 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f983 	bl	8000eae <HAL_CAN_TxMailbox0CompleteCallback>
 8000ba8:	e016      	b.n	8000bd8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbc:	e00c      	b.n	8000bd8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd0:	e002      	b.n	8000bd8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f986 	bl	8000ee4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d024      	beq.n	8000c2c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f962 	bl	8000ec0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000bfc:	e016      	b.n	8000c2c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d004      	beq.n	8000c12 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c10:	e00c      	b.n	8000c2c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
 8000c24:	e002      	b.n	8000c2c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f965 	bl	8000ef6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d024      	beq.n	8000c80 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f941 	bl	8000ed2 <HAL_CAN_TxMailbox2CompleteCallback>
 8000c50:	e016      	b.n	8000c80 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
 8000c64:	e00c      	b.n	8000c80 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	e002      	b.n	8000c80 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f944 	bl	8000f08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00c      	beq.n	8000ca4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f933 	bl	8000f2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f91b 	bl	8000f1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00c      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d007      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2210      	movs	r2, #16
 8000d06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00b      	beq.n	8000d2a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2208      	movs	r2, #8
 8000d22:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f913 	bl	8000f50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f8fb 	bl	8000f3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2210      	movs	r2, #16
 8000d62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f8fc 	bl	8000f62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00b      	beq.n	8000d8c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2208      	movs	r2, #8
 8000d84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8f4 	bl	8000f74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d07b      	beq.n	8000e8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d072      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d008      	beq.n	8000dbc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d043      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d03e      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e0e:	2b60      	cmp	r3, #96	; 0x60
 8000e10:	d02b      	beq.n	8000e6a <HAL_CAN_IRQHandler+0x32a>
 8000e12:	2b60      	cmp	r3, #96	; 0x60
 8000e14:	d82e      	bhi.n	8000e74 <HAL_CAN_IRQHandler+0x334>
 8000e16:	2b50      	cmp	r3, #80	; 0x50
 8000e18:	d022      	beq.n	8000e60 <HAL_CAN_IRQHandler+0x320>
 8000e1a:	2b50      	cmp	r3, #80	; 0x50
 8000e1c:	d82a      	bhi.n	8000e74 <HAL_CAN_IRQHandler+0x334>
 8000e1e:	2b40      	cmp	r3, #64	; 0x40
 8000e20:	d019      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x316>
 8000e22:	2b40      	cmp	r3, #64	; 0x40
 8000e24:	d826      	bhi.n	8000e74 <HAL_CAN_IRQHandler+0x334>
 8000e26:	2b30      	cmp	r3, #48	; 0x30
 8000e28:	d010      	beq.n	8000e4c <HAL_CAN_IRQHandler+0x30c>
 8000e2a:	2b30      	cmp	r3, #48	; 0x30
 8000e2c:	d822      	bhi.n	8000e74 <HAL_CAN_IRQHandler+0x334>
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d002      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x2f8>
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d005      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000e36:	e01d      	b.n	8000e74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e40:	e019      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e4a:	e014      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e54:	e00f      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e5e:	e00a      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e68:	e005      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e72:	e000      	b.n	8000e76 <HAL_CAN_IRQHandler+0x336>
            break;
 8000e74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f870 	bl	8000f86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4906      	ldr	r1, [pc, #24]	; (8001030 <__NVIC_EnableIRQ+0x34>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff90 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff2d 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff42 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff35 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e169      	b.n	800149c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c8:	2201      	movs	r2, #1
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8158 	bne.w	8001496 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a9a      	ldr	r2, [pc, #616]	; (8001454 <HAL_GPIO_Init+0x2a0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d05e      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011f0:	4a98      	ldr	r2, [pc, #608]	; (8001454 <HAL_GPIO_Init+0x2a0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d875      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 80011f6:	4a98      	ldr	r2, [pc, #608]	; (8001458 <HAL_GPIO_Init+0x2a4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d058      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011fc:	4a96      	ldr	r2, [pc, #600]	; (8001458 <HAL_GPIO_Init+0x2a4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d86f      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001202:	4a96      	ldr	r2, [pc, #600]	; (800145c <HAL_GPIO_Init+0x2a8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d052      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001208:	4a94      	ldr	r2, [pc, #592]	; (800145c <HAL_GPIO_Init+0x2a8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d869      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800120e:	4a94      	ldr	r2, [pc, #592]	; (8001460 <HAL_GPIO_Init+0x2ac>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04c      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001214:	4a92      	ldr	r2, [pc, #584]	; (8001460 <HAL_GPIO_Init+0x2ac>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d863      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800121a:	4a92      	ldr	r2, [pc, #584]	; (8001464 <HAL_GPIO_Init+0x2b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d046      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001220:	4a90      	ldr	r2, [pc, #576]	; (8001464 <HAL_GPIO_Init+0x2b0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d85d      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d82a      	bhi.n	8001280 <HAL_GPIO_Init+0xcc>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d859      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <HAL_GPIO_Init+0x80>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	080012af 	.word	0x080012af
 8001238:	08001289 	.word	0x08001289
 800123c:	0800129b 	.word	0x0800129b
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012e3 	.word	0x080012e3
 8001248:	080012e3 	.word	0x080012e3
 800124c:	080012e3 	.word	0x080012e3
 8001250:	080012e3 	.word	0x080012e3
 8001254:	080012e3 	.word	0x080012e3
 8001258:	080012e3 	.word	0x080012e3
 800125c:	080012e3 	.word	0x080012e3
 8001260:	080012e3 	.word	0x080012e3
 8001264:	080012e3 	.word	0x080012e3
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012e3 	.word	0x080012e3
 8001270:	080012e3 	.word	0x080012e3
 8001274:	080012e3 	.word	0x080012e3
 8001278:	08001291 	.word	0x08001291
 800127c:	080012a5 	.word	0x080012a5
 8001280:	4a79      	ldr	r2, [pc, #484]	; (8001468 <HAL_GPIO_Init+0x2b4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001286:	e02c      	b.n	80012e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e029      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	3304      	adds	r3, #4
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e024      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	3308      	adds	r3, #8
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e01f      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	330c      	adds	r3, #12
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e01a      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b6:	2304      	movs	r3, #4
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e013      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	611a      	str	r2, [r3, #16]
          break;
 80012ce:	e009      	b.n	80012e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	615a      	str	r2, [r3, #20]
          break;
 80012da:	e003      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          break;
 80012e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2bff      	cmp	r3, #255	; 0xff
 80012e8:	d801      	bhi.n	80012ee <HAL_GPIO_Init+0x13a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	e001      	b.n	80012f2 <HAL_GPIO_Init+0x13e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	d802      	bhi.n	8001300 <HAL_GPIO_Init+0x14c>
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x152>
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3b08      	subs	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	210f      	movs	r1, #15
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	6a39      	ldr	r1, [r7, #32]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	431a      	orrs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80b1 	beq.w	8001496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001334:	4b4d      	ldr	r3, [pc, #308]	; (800146c <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x2b8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_GPIO_Init+0x2b8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2bc>)
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a40      	ldr	r2, [pc, #256]	; (8001474 <HAL_GPIO_Init+0x2c0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d013      	beq.n	80013a0 <HAL_GPIO_Init+0x1ec>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3f      	ldr	r2, [pc, #252]	; (8001478 <HAL_GPIO_Init+0x2c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00d      	beq.n	800139c <HAL_GPIO_Init+0x1e8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3e      	ldr	r2, [pc, #248]	; (800147c <HAL_GPIO_Init+0x2c8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <HAL_GPIO_Init+0x1e4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <HAL_GPIO_Init+0x2cc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_GPIO_Init+0x1e0>
 8001390:	2303      	movs	r3, #3
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 8001394:	2304      	movs	r3, #4
 8001396:	e004      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 8001398:	2302      	movs	r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b2:	492f      	ldr	r1, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x2bc>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	492c      	ldr	r1, [pc, #176]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4928      	ldr	r1, [pc, #160]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4922      	ldr	r1, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	491e      	ldr	r1, [pc, #120]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4918      	ldr	r1, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4914      	ldr	r1, [pc, #80]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001434:	4013      	ands	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d021      	beq.n	8001488 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	490e      	ldr	r1, [pc, #56]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e021      	b.n	8001496 <HAL_GPIO_Init+0x2e2>
 8001452:	bf00      	nop
 8001454:	10320000 	.word	0x10320000
 8001458:	10310000 	.word	0x10310000
 800145c:	10220000 	.word	0x10220000
 8001460:	10210000 	.word	0x10210000
 8001464:	10120000 	.word	0x10120000
 8001468:	10110000 	.word	0x10110000
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40011000 	.word	0x40011000
 8001480:	40011400 	.word	0x40011400
 8001484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_GPIO_Init+0x304>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	43db      	mvns	r3, r3
 8001490:	4909      	ldr	r1, [pc, #36]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001492:	4013      	ands	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	3301      	adds	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f ae8e 	bne.w	80011c8 <HAL_GPIO_Init+0x14>
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	372c      	adds	r7, #44	; 0x2c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e272      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8087 	beq.w	80015ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014dc:	4b92      	ldr	r3, [pc, #584]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d00c      	beq.n	8001502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014e8:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d112      	bne.n	800151a <HAL_RCC_OscConfig+0x5e>
 80014f4:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d06c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x12c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d168      	bne.n	80015e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e24c      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x76>
 8001524:	4b80      	ldr	r3, [pc, #512]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a7f      	ldr	r2, [pc, #508]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e02e      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a77      	ldr	r2, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0xbc>
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a71      	ldr	r2, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001578:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a67      	ldr	r2, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff f896 	bl	80006c8 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff f892 	bl	80006c8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e200      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe4>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff f882 	bl	80006c8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff f87e 	bl	80006c8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1ec      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x10c>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b08      	cmp	r3, #8
 800160c:	d11c      	bne.n	8001648 <HAL_RCC_OscConfig+0x18c>
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x176>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1c0      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4939      	ldr	r1, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e03a      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x270>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff f837 	bl	80006c8 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff f833 	bl	80006c8 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1a1      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4927      	ldr	r1, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x270>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff f816 	bl	80006c8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff f812 	bl	80006c8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e180      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d03a      	beq.n	8001740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d019      	beq.n	8001706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_RCC_OscConfig+0x274>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7fe fff6 	bl	80006c8 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7fe fff2 	bl	80006c8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e160      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 face 	bl	8001ca0 <RCC_Delay>
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_OscConfig+0x274>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7fe ffdc 	bl	80006c8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001712:	e00f      	b.n	8001734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7fe ffd8 	bl	80006c8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d908      	bls.n	8001734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e146      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	42420000 	.word	0x42420000
 8001730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e9      	bne.n	8001714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a6 	beq.w	800189a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7fe ff99 	bl	80006c8 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7fe ff95 	bl	80006c8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	; 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e103      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x312>
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e02d      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x334>
 80017d6:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x356>
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7fe ff49 	bl	80006c8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7fe ff45 	bl	80006c8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0b1      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x37e>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7fe ff33 	bl	80006c8 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7fe ff2f 	bl	80006c8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e09b      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d061      	beq.n	8001974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d146      	bne.n	8001946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ff03 	bl	80006c8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7fe feff 	bl	80006c8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e06d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4921      	ldr	r1, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a19      	ldr	r1, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	430b      	orrs	r3, r1
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7fe fed3 	bl	80006c8 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7fe fecf 	bl	80006c8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e03d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x46a>
 8001944:	e035      	b.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7fe febc 	bl	80006c8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7fe feb8 	bl	80006c8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e026      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x498>
 8001972:	e01e      	b.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e019      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
 8001988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x500>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0d0      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4965      	ldr	r1, [pc, #404]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d040      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e073      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4936      	ldr	r1, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe fe0a 	bl	80006c8 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7fe fe06 	bl	80006c8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e053      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d210      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4922      	ldr	r1, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f821 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1cc>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd68 	bl	8000644 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	080020ec 	.word	0x080020ec
 8001b8c:	20000020 	.word	0x20000020
 8001b90:	20000024 	.word	0x20000024

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x36>
 8001bc2:	e027      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc6:	613b      	str	r3, [r7, #16]
      break;
 8001bc8:	e027      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	0c5b      	lsrs	r3, r3, #17
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e004      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	613b      	str	r3, [r7, #16]
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c16:	613b      	str	r3, [r7, #16]
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	693b      	ldr	r3, [r7, #16]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	08002104 	.word	0x08002104
 8001c34:	08002114 	.word	0x08002114
 8001c38:	003d0900 	.word	0x003d0900

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000020 	.word	0x20000020

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff2 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4903      	ldr	r1, [pc, #12]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080020fc 	.word	0x080020fc

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	0adb      	lsrs	r3, r3, #11
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	080020fc 	.word	0x080020fc

08001ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <RCC_Delay+0x34>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <RCC_Delay+0x38>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a5b      	lsrs	r3, r3, #9
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cbc:	bf00      	nop
  }
  while (Delay --);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f9      	bne.n	8001cbc <RCC_Delay+0x1c>
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000020 	.word	0x20000020
 8001cd8:	10624dd3 	.word	0x10624dd3

08001cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e042      	b.n	8001d74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fbde 	bl	80004c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	; 0x24
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f91d 	bl	8001f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d16d      	bne.n	8001e78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_UART_Transmit+0x2c>
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e066      	b.n	8001e7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dba:	f7fe fc85 	bl	80006c8 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d108      	bne.n	8001de8 <HAL_UART_Transmit+0x6c>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e003      	b.n	8001df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001df0:	e02a      	b.n	8001e48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f840 	bl	8001e82 <UART_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e036      	b.n	8001e7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10b      	bne.n	8001e2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	3302      	adds	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e007      	b.n	8001e3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3301      	adds	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1cf      	bne.n	8001df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2140      	movs	r1, #64	; 0x40
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f810 	bl	8001e82 <UART_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e006      	b.n	8001e7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e000      	b.n	8001e7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e78:	2302      	movs	r3, #2
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b090      	sub	sp, #64	; 0x40
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e92:	e050      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d04c      	beq.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ea2:	f7fe fc11 	bl	80006c8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d241      	bcs.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	e853 3f00 	ldrex	r3, [r3]
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	330c      	adds	r3, #12
 8001ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ed2:	637a      	str	r2, [r7, #52]	; 0x34
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eda:	e841 2300 	strex	r3, r2, [r1]
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e5      	bne.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3314      	adds	r3, #20
 8001f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f06:	623a      	str	r2, [r7, #32]
 8001f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0a:	69f9      	ldr	r1, [r7, #28]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	e841 2300 	strex	r3, r2, [r1]
 8001f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e5      	bne.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e00f      	b.n	8001f56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d09f      	beq.n	8001e94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3740      	adds	r7, #64	; 0x40
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f9a:	f023 030c 	bic.w	r3, r3, #12
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <UART_SetConfig+0x114>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fc8:	f7ff fe56 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	e002      	b.n	8001fd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fd0:	f7ff fe3e 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8001fd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009a      	lsls	r2, r3, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <UART_SetConfig+0x118>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	0119      	lsls	r1, r3, #4
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	fbb2 f2f3 	udiv	r2, r2, r3
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <UART_SetConfig+0x118>)
 800200e:	fba3 0302 	umull	r0, r3, r3, r2
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2064      	movs	r0, #100	; 0x64
 8002016:	fb00 f303 	mul.w	r3, r0, r3
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <UART_SetConfig+0x118>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	4419      	add	r1, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fbb2 f2f3 	udiv	r2, r2, r3
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <UART_SetConfig+0x118>)
 8002046:	fba3 0302 	umull	r0, r3, r3, r2
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2064      	movs	r0, #100	; 0x64
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	3332      	adds	r3, #50	; 0x32
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <UART_SetConfig+0x118>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 020f 	and.w	r2, r3, #15
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	440a      	add	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40013800 	.word	0x40013800
 8002078:	51eb851f 	.word	0x51eb851f

0800207c <memset>:
 800207c:	4603      	mov	r3, r0
 800207e:	4402      	add	r2, r0
 8002080:	4293      	cmp	r3, r2
 8002082:	d100      	bne.n	8002086 <memset+0xa>
 8002084:	4770      	bx	lr
 8002086:	f803 1b01 	strb.w	r1, [r3], #1
 800208a:	e7f9      	b.n	8002080 <memset+0x4>

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2600      	movs	r6, #0
 8002090:	4d0c      	ldr	r5, [pc, #48]	; (80020c4 <__libc_init_array+0x38>)
 8002092:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002094:	1b64      	subs	r4, r4, r5
 8002096:	10a4      	asrs	r4, r4, #2
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	f000 f81a 	bl	80020d4 <_init>
 80020a0:	2600      	movs	r6, #0
 80020a2:	4d0a      	ldr	r5, [pc, #40]	; (80020cc <__libc_init_array+0x40>)
 80020a4:	4c0a      	ldr	r4, [pc, #40]	; (80020d0 <__libc_init_array+0x44>)
 80020a6:	1b64      	subs	r4, r4, r5
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	08002118 	.word	0x08002118
 80020c8:	08002118 	.word	0x08002118
 80020cc:	08002118 	.word	0x08002118
 80020d0:	0800211c 	.word	0x0800211c

080020d4 <_init>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr

080020e0 <_fini>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr
